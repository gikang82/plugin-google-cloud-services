name: "[CI]release"
on:
  push:
    tags:
      - "v*.*"
  workflow_dispatch:
    inputs:
      tag:
        description: '`vx.y.z` 형태로 버전을 입력해주세요.'
        required: true
        default: v1.3.0

jobs:
  
  condition_check:
    runs-on: ubuntu-latest
    outputs:
      NOT_FIRST_TAG: ${{ steps.job1.outputs.not_first_tag }}
      TAG: ${{ steps.set_env.outputs.TAG }}
    steps:
      - name: set TAG env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]
            then
              echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "push" ]]
            then
              echo "TAG=$(echo ${{ github.ref }} | cut -c 11-)" >> $GITHUB_ENV
            else
              echo "TAG=$(echo ${{ github.event.client_payload.version }})" >> $GITHUB_ENV
          fi
      - name: find major & minor version
        id: set_env
        run: |
          echo "::set-output name=TAG::${{env.TAG}}"
          echo "major=$(echo ${{env.TAG}} | cut -c 2- | cut -d'.' -f1)" >> $GITHUB_ENV
          echo "minor=$(echo ${{env.TAG}} | cut -c 2- | cut -d'.' -f2)" >> $GITHUB_ENV
          echo "patch=$(echo ${{env.TAG}} | cut -c 2- | cut -d'.' -f3)" >> $GITHUB_ENV
      - name: debugging
        run: |
          echo ${{env.TAG}}
          echo ${{env.major}}
          echo ${{env.minor}}
          echo ${{env.patch}}
      - name: totally same version, redeploy dockerhub
        id: job1
        run: |
          if [ "$(cat src/VERSION)" == "${{ env.TAG }}" ]
            then echo "::set-output name=not_first_tag::true"
            else echo "::set-output name=not_first_tag::false"
          fi
  update_master_branch_version_file:
    needs: condition_check
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.condition_check.outputs.TAG }}
    if: needs.condition_check.outputs.NOT_FIRST_TAG == 'false'
    steps:
      - name: update master version
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.PAT_TOKEN }}
          event-type: update_master_version
          client-payload: '{"version": "${{ env.TAG }}"}'
          
  docker:
    needs: [condition_check, update_master_branch_version_file]
    if: github.repository_owner == 'spaceone-dev'
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.condition_check.outputs.TAG }}
    steps:
      - 
        name: versioning
        run: |
          echo "VERSION=$(echo ${{ env.VERSION }} | cut -c 2-)" >> $GITHUB_ENV
      - 
        name: get service name
        run: |
          echo "SERVICE=$(echo ${{ github.repository }} | cut -d '/' -f2)" >> $GITHUB_ENV
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Build and push to pyengine
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: pyengine/${{ env.SERVICE }}:${{ env.VERSION }}
      -
        name: Build and push to spaceone
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: spaceone/${{ env.SERVICE }}:${{ env.VERSION }}

  notify_to_slack:
    if: github.repository_owner == 'spaceone-dev'
    needs: [condition_check, update_local_version_file, docker]
    runs-on: ubuntu-latest
    steps:
      - name: Slack
        if: always()
        uses: 8398a7/action-slack@v3.2.0
        with:
          status: ${{job.status}}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          author_name: Github Action Slack
        env:
          SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}
